'use strict';
var log4js = require('log4js');
var path = require('path');
var fs = require('fs');
var util = require('util');
var request = require('request');

/**
 *  配置模版
{
    "filename" : "logs/server.log",
    "levels": "ALL",
    "console": true,
    "logService":{
        "url": "http://localhost:8888",
        "log": "/xgw.s1.game.access",
        "console": "/xgw.s1.game.console"
    }
}
 */

/**
 *  log4js 配置模版
    {
      "appenders": [
        { 
          "category": "tests", 
          "type": "file", 
          "filename": "tmp-tests.log", 
          "layout": { 
            "type": "messagePassThrough" 
          } 
        }
      ],
      
      "levels": {
        "tests":  "WARN"
      }
    }
 */

var baseLevel = 'ALL';
var categorys = [];
var bConfig = false;
var serverConfig = null;

/**
 * 配置日志模块.
 * 配置文件格式参考上文
 *
 * @param  {String|Object} config 配置文件路径或者配置文件对象
 * @return {void}
 */
function configure(config) {

    // 赋值默认值
    if (!config) {
        config = {
            'filename': 'logs/server.log',
            'levels': 'ALL',
            'console': true
        };
    } else {
        // 如果为文件路径. 加载文件
        if (typeof config === 'string') {
            config = JSON.parse(fs.readFileSync(config, 'utf8'));
        }
    }
    // 检测目录是否存在
    var dir = path.dirname(config.filename);
    mkdirSync(dir);

    // 文件路径加入时间
    var d = new Date();
    var time = util.format('-yyyy-MM-dd-%s-%s-%s.log', d.getHours(), d.getMinutes(), d.getSeconds());
    config.filename = config.filename.replace('.log', '');

    // 转换为log4js 配置格式 
    var log4jsConfig = {
        'appenders': [],
        'levels': {}
    };
    var appender = {};
    // 设置文件为按天存储
    appender.type = 'dateFile';
    appender.filename = config.filename;
    appender.pattern = time;
    appender.alwaysIncludePattern = true;
    // 'base' 为日志模块默认配置
    appender.layout = {
        'type': 'base'
    };

    if (config.levels) {
        baseLevel = config.levels;
    }
    appender.fileSize = 10485760;
    appender.backups = 100;

    log4jsConfig.appenders.push(appender);

    // 加入控制台输出
    if (config.console) {
        log4jsConfig.appenders.push({
            'type': 'console'
        });
    }
    // 调用log4js配置
    log4js.configure(log4jsConfig, {});

    serverConfig = config.logService || null;
    if (serverConfig) {
        replaceConsole();
    };
    bConfig = true;
};

/**
 * 获取logger对象
 *
 * @param  {String} category
 * @return {Object} logger对象
 */
function getLogger(category) {

    if (!bConfig) {
        if (fs.existsSync('cfg/logger.json')) {
            configure('cfg/logger.json');
        } else {
            configure();
        }
    }

    if (typeof category == 'string') {
        // category 默认是 __filename
        // 转换绝对路径为相对路径
        var pwd = path.normalize(process.cwd() + '/../');
        category = category.replace(pwd, '');
    }

    if (process.game_config && process.game_config.server_type) {
        category = '[' + process.game_config.server_type + '] ' + category;
    } else {
        category = '[] ' + category;
    }

    var log = log4js.getLogger(category);
    log.setLevel(baseLevel);

    if (serverConfig) {
        log.addListener('log', function(logEvent) {
            var logInfo = util.format.apply(this, logEvent.data);
            var level = logEvent.level;
            if (typeof level != 'string') {
                level = level.levelStr;
            };
            var msg = {
                'level': level,
                'category': logEvent.categoryName,
                'message': logInfo
            }
            logService(msg, 'console');
        });
    };

    return log;
};


/**
 * 检查创建文件夹
 *
 * @param  {String} url 指定文件夹路径
 * @param  {Number} mode 目录权限
 * @return {Void}
 */
function mkdirSync(url, mode) {

    var arr = url.split('/');

    mode = mode || '0755';

    if (arr[0] === '.') { //处理 ./aaa
        arr.shift();
    }
    if (arr[0] == '..') { //处理 ../ddd/d
        arr.splice(0, 2, arr[0] + '/' + arr[1])
    }

    function inner(cur) {
        if (!fs.existsSync(cur)) { //不存在就创建一个
            fs.mkdirSync(cur, mode)
        }
        if (arr.length) {
            inner(cur + '/' + arr.shift());
        }
    }
    arr.length && inner(arr.shift());
};


/**
 * 发送日志信息到服务器
 *
 * @param {Object} json 发送日志内容
 * @param {String} type 日志类型
 * @memberOf logServer
 */
function logService(json, type) {

    // 如果没配置服务器则退出
    if (!serverConfig) {
        return;
    };

    if (typeof json == 'object') {
        json = JSON.stringify(json);
    };

    //发起 post 请求
    request.post({
        'url': serverConfig.url + serverConfig[type],
        'form': {
            'json': json
        },
        'json': true
    }, function(error) {});
};


var originalConsoleFunctions = {
    log: console.log,
    debug: console.debug,
    info: console.info,
    warn: console.warn,
    error: console.error
};

/**
 * 替换屏幕打印log函数
 *
 * @param {Object} json 发送日志内容
 * @memberOf logServer
 */
function replaceConsole() {
    function replaceWith(fn) {
        return function() {
            var logInfo = util.format.apply(this, arguments);
            originalConsoleFunctions[fn](logInfo);
            var msg = {
                'level': fn,
                'category': 'console',
                'message': logInfo
            }
            logService(msg, 'console');
        }
    }

    ['log', 'debug', 'info', 'warn', 'error'].forEach(function(item) {
        console[item] = replaceWith(item);
    });
};

module.exports = {
    'configure': configure,
    'getLogger': getLogger
};