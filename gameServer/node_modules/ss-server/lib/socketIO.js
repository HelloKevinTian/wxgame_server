'use strict';
/**
 * @websocket网络模块
 * @author tw
 */
var util = require('util');
var socketIO = require('socket.io');
var fs = require('fs');
var EventEmitter = require('events').EventEmitter;
var logger = require('ss-logger').getLogger(__filename);

var domain = require('domain');
var Handler = require('ss-handler');
var protoManager = require('../../../proto/ProtoManager');

/**
 * 网络连接器
 * @extends EventEmitter
 */
var Connector = function() {
	EventEmitter.call(this);

	this.name = null; //服务器名
	this.type = null; //服务器类型
	this.host = ''; //服务器IP
	this.port = 0; //监听端口
	this.timeout = 0; //socket超时时间
	this.isBigEndian = null; //传输数据是否为大端序
	this.use_json = true; //传输格式是否使用json

	this.handler = null; //模块句柄
	this.server = null; //服务器实例
	this.verifyMsg = null; //通讯数据包校验
	this.connection = null; //socket连接时触发模块
	this.disconnect = null; //socket出错时触发模块

	this.nologMessage = null;
};

util.inherits(Connector, EventEmitter);

/**
 * 配置服务器相关
 *
 * @param {String} config 配置文件路径
 */
Connector.prototype.configure = function(type, config) {
	if (type === 'server') {

		this.name = config.name;
		this.type = config.type;
		this.host = config.host;
		this.port = config.port;
		this.timeout = config.timeout;
		this.isBigEndian = config.big_endian;
		this.use_json = config.use_json;

		this.nologMessage = config.nolog_message; //无日志打印的消息列表

		if (config.hasOwnProperty('verifyMsg')) {
			this.verifyMsg = require(process.cwd() + config.verifyMsg).handle;
		}
		if (config.hasOwnProperty('connection')) {
			this.connection = require(process.cwd() + config.connection).handle;
		}
		if (config.hasOwnProperty('disconnect')) {
			this.disconnect = require(process.cwd() + config.disconnect).handle;
		}
	} else if (type === 'handle') {
		this.handler = new Handler(config);
	}
};

/**
 * 创建 socket.io 服务器
 */
Connector.prototype.createSocketIOServer = function() {
	//logger.js line 141 有定制修改
	var self = this;
	self.server = socketIO();
	self.server.listen(self.port);
	// 连接请求
	self.server.on('connection', function(socket) {

		// 添加回包函数
		socket.sendMessage = function(data, name) {
			logger.info('发送到客户端数据[ %s ][ %s ]', name, JSON.stringify(data));
			if (self.use_json) { //json
				socket.emit(name, JSON.stringify(data));
			} else { //protobuf
				var buf = protoManager.Encode(data, name);
				socket.emit(name, buf);
			}
		}
		socket.sendError = function(err, flowid) {
			var code = Number(err);
			if (isNaN(code) || err == null || err == undefined) {
				code = 10000;
			}

			if (self.use_json) {
				socket.sendMessage('message_s2c_error_code', {
					'code': code
				});
			} else {
				var msg = protoManager.NewMessage('s2c_error_code', {
					'tail': {
						'time': Math.floor(Date.now()),
						'flowid': flowid
					},
					'code': code
				});
				socket.sendMessage(msg, 'message_s2c_error_code');
			}
		}
		socket.sendToAll = function(name, data) {
			logger.info('发送到所有客户端数据[ %s ][ %s ]', name, JSON.stringify(data));
			if (self.use_json) { //json
				socket.broadcast.emit(name, JSON.stringify(data));
			} else { //protobuf
				var buf = protoManager.Encode(data, name);
				socket.broadcast.emit(name, buf);
			}
		}

		// 连接成功
		var clientip = socket.conn.remoteAddress.slice(7);
		logger.info('new client connected[%s] [%s]', clientip, socket.id);
		if (self.connection && typeof self.connection == 'function') {
			self.connection.call(null, socket);
		};

		// 注册消息回调
		var handleList = self.handler.getHandleList();
		for (var k in handleList) {
			(function(urlpath) {
				socket.on(urlpath, function(args) {
					self.socketMessage(urlpath, args, socket);
				});
			})(k);
		}

		// 断开连接
		socket.on('disconnect', function(reason) {
			logger.debug('客户端[%s][%s] 断开连接', clientip, socket.conn.id, reason);
			if (self.disconnect && typeof self.disconnect == 'function') {
				self.disconnect.call(null, socket);
			};
		});

		// 监听error
		socket.on('error', function(err) {
			logger.error('socket error:', err);
			if (self.disconnect && typeof self.disconnect == 'function') {
				self.disconnect.call(null, socket);
			};
			socket.disconnect(true); //关闭socket
		});
	});
};

/**
 * 数据协议解析
 *
 * @param {String} urlpath url路径
 * @param {Object} args 数据包
 * @param {Function} endcb 结束回调函数
 */
Connector.prototype.socketMessage = function(urlpath, args, socket) {
	var self = this;

	this.verifyMessage(args, function(result, data) {
		if (result) {
			return logger.error('[ %s-Server ] 数据验证未通过!', self.name);
		}

		if (self.handler) {
			self.handler.trigger(urlpath, data, socket);
		} else {
			logger.error('[ %s-Server ]收到未知请求 urlpath[ %s ] data[ %s ]', self.name, urlpath, JSON.stringify(data));
			endcb();
		}
	}, socket, urlpath);
};

/**
 * 数据验证
 *
 * @param {Object} args 数据包
 * @param {Function} endcb 结束回调函数
 */
Connector.prototype.verifyMessage = function(args, result, socket, urlpath) {
	if (this.verifyMsg && typeof this.verifyMsg === 'function') {
		this.verifyMsg(args, result, socket, urlpath);
	} else {
		result(false, args);
	}
};

/**
 * 发送消息给全部客户端
 *
 * @param {String} name 名字
 * @param {Object} body 数据包
 */
Connector.prototype.sendToAll = function(name, body) {
	logger.info('发送到全部客户端数据[ %s ][ %s ]', name, JSON.stringify(body));
	this.server.emit(name, body);
};

/**
 * 开启服务器
 */
Connector.prototype.start = function() {
	if (this.type === 'ws') {
		this.createSocketIOServer();
	} else {
		logger.error('开启服务器 类型错误! this.type = [ %s ]', this.type);
	}
};

/**
 * 显示服务器信息
 */
Connector.prototype.show = function() {
	logger.debug('创建 %s 服务器 host = [%s] port = [%d]', this.type, this.host, this.port);
};

module.exports = Connector;