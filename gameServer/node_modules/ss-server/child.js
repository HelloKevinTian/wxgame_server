'use strict';
var logger = require('ss-logger').getLogger(__filename);
var fs = require('fs');
var util = require('util');
var mongo = require('ss-mongo');
var protoManager = require('../../proto/ProtoManager')

//加入全局变量
global.UTIL = require('../../util/util');
global.CONST = require('../../util/const');

protoManager.LoadAllProtoFile();

var handleConfig = JSON.parse(process.argv[2]);
var serverConfig = JSON.parse(process.argv[3]);

//加入进程信息（必须在网络模块之前）
process.game_config = serverConfig;

//初始化网络模块
var Connector;
if (serverConfig.type == 'tcp'){
	Connector = require('./lib/tcp.js');	
} else if (serverConfig.type = 'ws') {
	Connector = require('./lib/socketIO.js');
} else {
	return logger.error('创建服务器失败 type [%s] name [%s]', serverConfig.type, serverConfig.name);
}
var server = new Connector();
server.configure('handle', handleConfig);
server.configure('server', serverConfig);
server.start();
server.show();

//加入进程信息
process.game_server = server;

// logger.info('@@@@@@@@@', handleConfig, serverConfig);

//加载DB模块
mongo.configure('cfg/mongo.json');
logger.info('添加mongodb读写组件');

//mgr模块初始化
loadMgr();
function loadMgr() {
	var mgrList = null;
	if (serverConfig.mgr_list && serverConfig.mgr_list.length > 0) {
		mgrList = serverConfig.mgr_list;
	} else {
		mgrList = fs.readdirSync('./app/');
	}

	mgrList.forEach(function(value) {
		var appModule = require('../../app/' + value);
		for (var j in appModule) {
			if (j === 'init') {
				appModule.init();
				break;
			}
		}
	});
}


process.on('uncaughtException', function(err) {
	if (logger) {
		logger.error('未知异常: %s', err.stack);
	} else {
		console.error('未知异常: ' + err.stack);
	}
	var d = new Date();
	var time = util.format('%d-%d-%d-%d-%d-%d', d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds());
	var str = util.format('%s 未知异常: %s\n', time, err.stack);
	if (!fs.existsSync('./logs')) { //不存在就创建一个
		fs.mkdirSync('./logs', '0755')
	}
	fs.appendFile('logs/' + serverConfig.name + '_uncaughtException.log', str);
});